// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model User {
  id                   String                @id @default(auto()) @map("_id") @db.ObjectId
  email                String                @unique
  name                 String?
  password             String? // For credentials login
  salt                 String? // For password hashing
  role                 String // Existing role field
  domains              Domain[]
  notificationContacts NotificationContact[]
  AdminLogs            AdminLog[]
  stripeCustomers      String[]

  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime? @default(now())
  updatedAt     DateTime? @updatedAt

  @@map("user")
}

model NotificationContact {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  email  String?
  name   String
  type   String
  user   User    @relation(fields: [userId], references: [id])
  userId String  @db.ObjectId

  @@map("notificationcontact")
}

model Domain {
  id                                String         @id @default(auto()) @map("_id") @db.ObjectId
  name                              String
  domainName                        String         @unique
  domainVerificationKey             String?
  domainVerified                    Boolean?
  internalLinks                     InternalLink[]
  externalLinks                     ExternalLink[]
  user                              User           @relation(fields: [userId], references: [id])
  domainCrawls                      DomainCrawl[]
  userId                            String         @db.ObjectId
  lastCrawl                         DateTime?
  lastErrorTime                     DateTime?
  lastErrorType                     String?
  lastErrorMessage                  String?
  crawlStatus                       String?
  crawlInterval                     Int?
  crawlEnabled                      Boolean?
  crawlDepth                        Int?
  errorStatus                       String?
  lastCrawlTime                     Int?
  disableNotifications              Boolean?
  warning                           Boolean?
  error                             Boolean?
  errorUnknown                      Boolean?
  error404                          Boolean?
  error404NotificationDisabled      Boolean?
  error404NotificationDisabledUntil DateTime?
  error503                          Boolean?
  error503NotificationDisabled      Boolean?
  error503NotificationDisabledUntil DateTime?
  score                             Float?
  adminLogs                         AdminLog[]
  image                             String?
  performanceScore                  Float?
  lastLighthouseAnalysis            DateTime?
  lastQuickAnalysis                 DateTime?
  robotsIndex                       Boolean?
  robotsFollow                      Boolean?
  timeoutPercentage                 Float?
  badRequestPercentage              Float?
  typeErrorPercentage               Float?

  @@map("domain")
}

model DomainCrawl {
  id                 String    @id @default(auto()) @map("_id") @db.ObjectId
  domain             Domain    @relation(fields: [domainId], references: [id])
  domainId           String    @db.ObjectId
  crawlType          String?
  startTime          DateTime
  endTime            DateTime?
  crawlTime          Int?
  status             String
  error              Boolean
  errorName          String?
  errorMessage       String?
  warningDoubleSlash Boolean?
  error404           Boolean?
  error503           Boolean?

  @@map("domaincrawl")
}

model AnonymousCrawl {
  id                 String    @id @default(auto()) @map("_id") @db.ObjectId
  domainName         String
  crawlType          String?
  startTime          DateTime
  endTime            DateTime?
  crawlTime          Int?
  status             String
  error              Boolean
  errorName          String?
  errorMessage       String?
  warningDoubleSlash Boolean?
  error404           Boolean?

  @@map("anonymouscrawl")
}

model InternalLink {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  path               String
  lastCheck          DateTime
  lastLoadTime       Int
  seoData            SeoData?
  seoDataId          String?
  domain             Domain   @relation(fields: [domainId], references: [id])
  domainId           String   @db.ObjectId
  type               String?
  errorCode          Int?
  foundOnPath        String?
  warningDoubleSlash Boolean?

  @@unique([domainId, path])
  @@map("internalLink")
}

model SeoData {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  score          Int
  loadTime       Int
  indexable      Boolean
  internalLink   InternalLink @relation(fields: [internalLinkId], references: [id])
  internalLinkId String       @unique @db.ObjectId

  @@map("seodata")
}

model ExternalLink {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  url         String
  domain      Domain   @relation(fields: [domainId], references: [id])
  domainId    String   @db.ObjectId
  lastCheck   DateTime
  foundOnPath String?

  @@unique([domainId, url])
  @@map("externallink")
}

model AdminLog {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  message   String
  createdAt DateTime
  domain    Domain   @relation(fields: [domainId], references: [id])
  domainId  String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId

  @@map("adminlog")
}

model CronJob {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  type             String
  createdAt        DateTime
  lastStart        DateTime
  lastEnd          DateTime
  interval         Int
  acitve           Boolean
  status           String
  standardInterval Int?
  premiumInterval  Int?
  adminInterval    Int?

  @@map("cronjobs")
}
