generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

enum UserRole {
  ADMIN
  PREMIUM
  STANDARD
}

model User {
  id                   String                @id @default(auto()) @map("_id") @db.ObjectId
  email                String                @unique
  name                 String?
  password             String?
  salt                 String?
  role                 UserRole              @default(STANDARD)
  domains              Domain[]
  notificationContacts NotificationContact[]
  AdminLogs            AdminLog[]
  stripeCustomers      String[]
  emailVerified        DateTime?
  image                String?
  accounts             Account[]
  sessions             Session[]
  createdAt            DateTime?             @default(now())
  updatedAt            DateTime?             @updatedAt
  activities           UserActivity[]

  @@map("user")
}

model UserActivity {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  type      String
  provider  String?
  ipAddress String
  userAgent String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model NotificationContact {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  email  String?
  name   String
  type   String
  user   User    @relation(fields: [userId], references: [id])
  userId String  @db.ObjectId

  @@map("notificationcontact")
}

enum ImplementationStatus {
  NOT_IMPLEMENTED
  TEST
  DEVELOPMENT
  PRODUCTION
}

model ErrorType {
  id             String               @id @default(auto()) @map("_id") @db.ObjectId
  code           String               @unique
  name           String
  category       String
  severity       Severity
  implementation ImplementationStatus @default(NOT_IMPLEMENTED)
  errorLogs      ErrorLog[]
  userRole       UserRole             @default(ADMIN)

  @@map("errortype")
}

model ErrorLog {
  id                 String        @id @default(auto()) @map("_id") @db.ObjectId
  errorType          ErrorType     @relation(fields: [errorTypeId], references: [id])
  errorTypeId        String        @db.ObjectId
  createdAt          DateTime      @default(now())
  resolvedAt         DateTime?
  domain             Domain?       @relation("DomainErrors", fields: [domainId], references: [id], onDelete: Cascade)
  domainId           String?       @db.ObjectId
  internalLink       InternalLink? @relation("PageErrors", fields: [internalLinkId], references: [id])
  internalLinkId     String?       @db.ObjectId
  domainCrawl        DomainCrawl?  @relation("CrawlErrors", fields: [domainCrawlId], references: [id])
  domainCrawlId      String?       @db.ObjectId
  metadata           Json?
  occurrence         Int           @default(1)
  lastOccurrence     DateTime?     @default(now())
  notified           Boolean       @default(false)
  resolutionNotified Boolean?

  @@map("errorlog")
}

enum Severity {
  CRITICAL
  HIGH
  MEDIUM
  LOW
  INFO
}

enum NotificationType {
  MAIL
  NOTIFICATION
  BOTH
}

model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  domain    Domain   @relation(fields: [domainId], references: [id], onDelete: Cascade)
  domainId  String   @db.ObjectId
  type      String // notification type (error, warning, success)
  title     String
  message   String
  urls      String[] // Array of affected URLs
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  metadata  Json? // For storing additional notification data

  @@map("notifications")
}

model Domain {
  id                                String                 @id @default(auto()) @map("_id") @db.ObjectId
  name                              String
  domainName                        String
  domainVerificationKey             String?
  domainVerified                    Boolean?
  internalLinks                     InternalLink[]
  externalLinks                     ExternalLink[]
  user                              User                   @relation(fields: [userId], references: [id])
  domainCrawls                      DomainCrawl[]
  userId                            String                 @db.ObjectId
  lastCrawl                         DateTime?
  lastErrorTime                     DateTime?
  lastErrorType                     String?
  lastErrorMessage                  String?
  crawlStatus                       String?
  crawlInterval                     Int?
  crawlEnabled                      Boolean?
  crawlDepth                        Int?
  errorStatus                       String?
  lastCrawlTime                     Int?
  disableNotifications              Boolean?
  warning                           Boolean?
  error                             Boolean?
  errorUnknown                      Boolean?
  error404                          Boolean?
  error404NotificationDisabled      Boolean?
  error404NotificationDisabledUntil DateTime?
  error503                          Boolean?
  error503NotificationDisabled      Boolean?
  error503NotificationDisabledUntil DateTime?
  score                             Float?
  adminLogs                         AdminLog[]
  image                             String?
  performanceScore                  Float?
  lastLighthouseAnalysis            DateTime?
  lastQuickAnalysis                 DateTime?
  robotsIndex                       Boolean?
  robotsFollow                      Boolean?
  timeoutPercentage                 Float?
  badRequestPercentage              Float?
  typeErrorPercentage               Float?
  errorLogs                         ErrorLog[]             @relation("DomainErrors")
  metrics                           DomainMetrics[]
  quickAnalysisHistory              QuickAnalysisHistory[]
  lastPerformanceCheck              DateTime?
  lastQuickCheck                    DateTime?
  quickCheckScore                   Float?
  errorTypes                        Json? // Array of current error types
  warningTypes                      Json? // Array of current warning types
  statusHistory                     Json? // Track status changes over time
  timeToInteractive                 Float?
  firstContentfulPaint              Float?
  totalBytes                        Int?
  scriptCount                       Int?
  styleCount                        Int?
  imageCount                        Int?
  totalResources                    Int?
  lastMetricsUpdate                 DateTime?
  initialMessageSent                Boolean?
  notificationType                  NotificationType       @default(BOTH)
  notifications                     Notification[] // Add relation to notifications

  @@unique([userId, domainName])
  @@map("domain")
}

model QuickAnalysisHistory {
  id                   String   @id @default(auto()) @map("_id") @db.ObjectId
  domainId             String   @db.ObjectId
  domain               Domain   @relation(fields: [domainId], references: [id], onDelete: Cascade)
  score                Float
  metrics              Json
  issues               Json
  crawlTime            Int
  status               String
  timestamp            DateTime @default(now())
  timeToInteractive    Float?
  firstContentfulPaint Float?
  totalBytes           Int?
  scriptCount          Int?
  styleCount           Int?
  imageCount           Int?
  totalResources       Int?

  @@map("quickanalysishistory")
}

model DomainMetrics {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  domain    Domain     @relation(fields: [domainId], references: [id], onDelete: Cascade)
  domainId  String     @db.ObjectId
  timestamp DateTime   @default(now())
  type      MetricType
  score     Float
  metadata  Json? // For storing additional metric-specific data

  @@map("domainmetrics")
}

enum MetricType {
  DOMAIN_SCORE
  PERFORMANCE
  QUICK_CHECK
}

model DomainCrawl {
  id                 String     @id @default(auto()) @map("_id") @db.ObjectId
  domain             Domain     @relation(fields: [domainId], references: [id], onDelete: Cascade)
  domainId           String     @db.ObjectId
  crawlType          String?
  startTime          DateTime
  endTime            DateTime?
  crawlTime          Int?
  status             String
  error              Boolean
  errorName          String?
  errorMessage       String?
  warningDoubleSlash Boolean?
  error404           Boolean?
  error503           Boolean?
  errorLogs          ErrorLog[] @relation("CrawlErrors")
  remainingLinks     Json?
  isPartial          Boolean    @default(false)

  @@map("domaincrawl")
}

model AnonymousCrawl {
  id                 String    @id @default(auto()) @map("_id") @db.ObjectId
  domainName         String
  crawlType          String?
  startTime          DateTime
  endTime            DateTime?
  crawlTime          Int?
  status             String
  error              Boolean
  errorName          String?
  errorMessage       String?
  warningDoubleSlash Boolean?
  error404           Boolean?

  @@map("anonymouscrawl")
}

model InternalLink {
  id                 String     @id @default(auto()) @map("_id") @db.ObjectId
  path               String // path includes the domain
  createdAt          DateTime?  @default(now())
  lastCheck          DateTime
  lastLoadTime       Int
  seoData            SeoData?
  seoDataId          String?
  domain             Domain     @relation(fields: [domainId], references: [id], onDelete: Cascade)
  domainId           String     @db.ObjectId
  type               String?
  errorCode          Int?
  foundOnPath        String?
  warningDoubleSlash Boolean?
  errorLogs          ErrorLog[] @relation("PageErrors")
  language           String?

  @@unique([domainId, path])
  @@map("internalLink")
}

model SeoData {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  score          Int
  loadTime       Int
  indexable      Boolean
  internalLink   InternalLink @relation(fields: [internalLinkId], references: [id])
  internalLinkId String       @unique @db.ObjectId

  @@map("seodata")
}

model ExternalLink {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  url         String
  domain      Domain   @relation(fields: [domainId], references: [id], onDelete: Cascade)
  domainId    String   @db.ObjectId
  lastCheck   DateTime
  foundOnPath String?

  @@unique([domainId, url])
  @@map("externallink")
}

enum LogLevel {
  INFO
  WARN
  ERROR
}

model AdminLog {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  message   String
  createdAt DateTime  @default(now())
  domain    Domain?   @relation(fields: [domainId], references: [id], onDelete: Cascade)
  domainId  String?   @db.ObjectId
  user      User?     @relation(fields: [userId], references: [id])
  userId    String?   @db.ObjectId
  level     LogLevel?

  @@map("adminlog")
}

model CronJob {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  type             String
  createdAt        DateTime @default(now())
  lastStart        DateTime
  lastEnd          DateTime
  interval         Int
  acitve           Boolean
  status           String
  standardInterval Int?
  premiumInterval  Int?
  adminInterval    Int?

  @@map("cronjobs")
}
