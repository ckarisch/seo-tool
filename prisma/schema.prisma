// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                   String                @id @default(auto()) @map("_id") @db.ObjectId
  email                String                @unique
  name                 String
  password             String
  salt                 String
  role                 String
  domains              Domain[]
  notificationContacts NotificationContact[]
  AdminLogs            AdminLog[]

  @@map("user")
}

model NotificationContact {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  email  String?
  name   String
  type   String
  user   User    @relation(fields: [userId], references: [id])
  userId String  @db.ObjectId

  @@map("notificationcontact")
}

model Domain {
  id                                String         @id @default(auto()) @map("_id") @db.ObjectId
  name                              String
  domainName                        String         @unique
  domainVerificationKey             String?
  domainVerified                    Boolean?
  internalLinks                     InternalLink[]
  externalLinks                     ExternalLink[]
  user                              User           @relation(fields: [userId], references: [id])
  domainCrawls                      DomainCrawl[]
  userId                            String         @db.ObjectId
  lastCrawl                         DateTime?
  lastErrorTime                     DateTime?
  lastErrorType                     String?
  lastErrorMessage                  String?
  crawlStatus                       String?
  crawlInterval                     Int? // in minutes
  crawlEnabled                      Boolean?
  crawlDepth                        Int?
  errorStatus                       String?
  lastCrawlTime                     Int?
  disableNotifications              Boolean?
  // warning
  warning                           Boolean?
  // error states
  error                             Boolean?
  errorUnknown                      Boolean?
  error404                          Boolean?
  error404NotificationDisabled      Boolean?
  error404NotificationDisabledUntil DateTime?
  error503                          Boolean?
  error503NotificationDisabled      Boolean?
  error503NotificationDisabledUntil DateTime?
  score                             Float?
  adminLogs                         AdminLog[]
  image                             String? //@db.VarChar(2000) for sql
  performanceScore                  Float?
  lastLighthouseAnalysis            DateTime?
  lastQuickAnalysis                 DateTime?

  @@map("domain")
}

model DomainCrawl {
  id                 String    @id @default(auto()) @map("_id") @db.ObjectId
  domain             Domain    @relation(fields: [domainId], references: [id])
  domainId           String    @db.ObjectId
  crawlType          String? // 2do: make not nullable
  startTime          DateTime
  endTime            DateTime?
  crawlTime          Int?
  status             String
  error              Boolean
  errorName          String?
  errorMessage       String?
  warningDoubleSlash Boolean?
  error404           Boolean?

  @@map("domaincrawl")
}

model AnonymousCrawl {
  id                 String    @id @default(auto()) @map("_id") @db.ObjectId
  domainName         String
  crawlType          String? // 2do: make not nullable
  startTime          DateTime
  endTime            DateTime?
  crawlTime          Int?
  status             String
  error              Boolean
  errorName          String?
  errorMessage       String?
  warningDoubleSlash Boolean?
  error404           Boolean?

  @@map("anonymouscrawl")
}

model InternalLink {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  path               String
  lastCheck          DateTime
  lastLoadTime       Int
  seoData            SeoData?
  seoDataId          String?
  domain             Domain   @relation(fields: [domainId], references: [id])
  domainId           String   @db.ObjectId
  type               String?
  errorCode          Int?
  foundOnPath        String?
  warningDoubleSlash Boolean?

  @@unique([domainId, path])
  @@map("internalLink")
}

model SeoData {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  score          Int
  loadTime       Int
  indexable      Boolean
  internalLink   InternalLink @relation(fields: [internalLinkId], references: [id])
  internalLinkId String       @unique @db.ObjectId

  @@map("seodata")
}

model ExternalLink {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  url         String
  domain      Domain   @relation(fields: [domainId], references: [id])
  domainId    String   @db.ObjectId
  lastCheck   DateTime
  foundOnPath String?

  @@unique([domainId, url])
  @@map("externallink")
}

model AdminLog {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  message   String
  createdAt DateTime
  domain    Domain   @relation(fields: [domainId], references: [id])
  domainId  String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId

  @@map("adminlog")
}

model CronJob {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  type             String
  createdAt        DateTime
  lastStart        DateTime
  lastEnd          DateTime
  interval         Int // in minutes
  acitve           Boolean
  status           String
  standardInterval Int?
  premiumInterval  Int?
  adminInterval    Int?

  @@map("cronjobs")
}
